// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_agent.proto

#ifndef PROTOBUF_log_5fagent_2eproto__INCLUDED
#define PROTOBUF_log_5fagent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_log_5fagent_2eproto();
void protobuf_AssignDesc_log_5fagent_2eproto();
void protobuf_ShutdownFile_log_5fagent_2eproto();

class report_log_msg;

// ===================================================================

class report_log_msg : public ::google::protobuf::Message {
 public:
  report_log_msg();
  virtual ~report_log_msg();
  
  report_log_msg(const report_log_msg& from);
  
  inline report_log_msg& operator=(const report_log_msg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const report_log_msg& default_instance();
  
  void Swap(report_log_msg* other);
  
  // implements Message ----------------------------------------------
  
  report_log_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const report_log_msg& from);
  void MergeFrom(const report_log_msg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  
  // required string file = 2;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 2;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  
  // repeated string logs = 3;
  inline int logs_size() const;
  inline void clear_logs();
  static const int kLogsFieldNumber = 3;
  inline const ::std::string& logs(int index) const;
  inline ::std::string* mutable_logs(int index);
  inline void set_logs(int index, const ::std::string& value);
  inline void set_logs(int index, const char* value);
  inline void set_logs(int index, const char* value, size_t size);
  inline ::std::string* add_logs();
  inline void add_logs(const ::std::string& value);
  inline void add_logs(const char* value);
  inline void add_logs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& logs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_logs();
  
  // @@protoc_insertion_point(class_scope:report_log_msg)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_file();
  inline void clear_has_file();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* source_;
  ::std::string* file_;
  ::google::protobuf::RepeatedPtrField< ::std::string> logs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_5fagent_2eproto();
  friend void protobuf_AssignDesc_log_5fagent_2eproto();
  friend void protobuf_ShutdownFile_log_5fagent_2eproto();
  
  void InitAsDefaultInstance();
  static report_log_msg* default_instance_;
};
// ===================================================================


// ===================================================================

// report_log_msg

// optional string source = 1;
inline bool report_log_msg::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void report_log_msg::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void report_log_msg::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void report_log_msg::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& report_log_msg::source() const {
  return *source_;
}
inline void report_log_msg::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void report_log_msg::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void report_log_msg::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* report_log_msg::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* report_log_msg::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string file = 2;
inline bool report_log_msg::has_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void report_log_msg::set_has_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void report_log_msg::clear_has_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void report_log_msg::clear_file() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& report_log_msg::file() const {
  return *file_;
}
inline void report_log_msg::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void report_log_msg::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void report_log_msg::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* report_log_msg::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  return file_;
}
inline ::std::string* report_log_msg::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string logs = 3;
inline int report_log_msg::logs_size() const {
  return logs_.size();
}
inline void report_log_msg::clear_logs() {
  logs_.Clear();
}
inline const ::std::string& report_log_msg::logs(int index) const {
  return logs_.Get(index);
}
inline ::std::string* report_log_msg::mutable_logs(int index) {
  return logs_.Mutable(index);
}
inline void report_log_msg::set_logs(int index, const ::std::string& value) {
  logs_.Mutable(index)->assign(value);
}
inline void report_log_msg::set_logs(int index, const char* value) {
  logs_.Mutable(index)->assign(value);
}
inline void report_log_msg::set_logs(int index, const char* value, size_t size) {
  logs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* report_log_msg::add_logs() {
  return logs_.Add();
}
inline void report_log_msg::add_logs(const ::std::string& value) {
  logs_.Add()->assign(value);
}
inline void report_log_msg::add_logs(const char* value) {
  logs_.Add()->assign(value);
}
inline void report_log_msg::add_logs(const char* value, size_t size) {
  logs_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
report_log_msg::logs() const {
  return logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
report_log_msg::mutable_logs() {
  return &logs_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_log_5fagent_2eproto__INCLUDED
